#!expect --

# Time-stamp: "Fri 2003-08-29 18:41 fni"

# Author: Matt Crawford
# Modified by: Fabrice Niessen <fni@missioncriticalit.com>
# Version: $Revision: 1.6 $

# Do one or more configuration commands on one or more cisco routers.
# Usage:    ciscoconfig "command one;command two..." router-1 router-2 ...
# The -w option does a "write mem" after the commands.
#
#		-- Matt Crawford, Fermilab

# set exp_nt_debug 1

# output pattern matching information to stderr
# exp_internal 1

set argv [ concat "ciscoconfig" $argv ]
puts "there are [llength $argv] command line parameters"
puts "they are: $argv"

if {[llength $argv] < 3} {
    puts "Usage: ciscoconfig \[-w\] \"command one;command two...\" router-1 router-2 ..."
    exit
}

set dowrite 0

if {[lindex $argv 1] == "-w"} {
    set dowrite 1
    set argv [concat [lindex $argv 0] [lrange $argv 2 end]]
}

if {[regexp {^[./]} [lindex $argv 1]]} {
    if {! [file readable [lindex $argv 1]]} {
	puts stderr "Error: can't read file [lindex $argv 1]\n"
	exit 1
    }
    set comfile [open [lindex $argv 1] "r"]
    set commands [split [read $comfile nonewline] "\n"]
} else {
    set commands [split [lindex $argv 1] ";"]
}
set routers [lrange $argv 2 end]
set send_slow {10 0.1}
source "ciscologin.expect"

send_user "\n\n"

foreach router $routers {
    spawn telnet $router

    if {[login $router enable] == "fail"} {
	continue
    }
    send "terminal length 0\r"

    expect {
	$ciscoprompt {}
	timeout {
	    timedout waiting for prompt
	    continue
	}
    }

    log_file $router.log
    send -s "configure terminal\r"

    expect {
	{CNTL/Z*} {}
	timeout {
	    timedout waiting for config prompt
	    log_file
	    continue
	}
    }

    foreach command $commands {
	send -s "[string trim $command]\r"
    }
    set controlz \032  
    send "$controlz"

    expect {
	$ciscoprompt {}
	timeout {
	    timedout waiting for post-configure prompt
	    log_file
	    continue
	}
    }

    if {$dowrite} {
	send "write mem\r"
	set gotok 0

	expect {
	    {OK} {
		set gotok 1
		continue -expect
	    }
	    $ciscoprompt {
		if {! $gotok} {send_user "Didn't get OK\n"}
	    }
	    timeout {
		timedout waiting for post-write prompt
	    }
	}
    }

    log_file
    set timeout 20
    send "quit\r"

    expect {
	{*Connection closed*} {}
    }
    # send_user "\r\r"
    close
}

exit 0