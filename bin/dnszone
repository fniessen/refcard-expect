#!/usr/bin/expect -f

# Time-stamp: "Mon 2008-09-15 16:13 sva on mundaneum"

# Author: Mark Meretzky
# Modified by: Fabrice Niessen <fni@missioncriticalit.com>
# Version: $Revision: 1.5 $

# Perform a DNS zone transfer.
# Usage: dnszone DOMAIN SERVER

# set exp_nt_debug 1

# output pattern matching information to stderr
# exp_internal 1

if {$argc < 1} {
    puts stderr "Usage: $argv0 DOMAIN \[SERVER\]\n"
    exit 1
}
set domain [lindex $argv 0]
set server [lindex $argv 1]

send_user "Connecting to `$domain'...\n"
log_user 0
set timeout 60;    # default 10 seconds; -1 wait forever; 0 no wait
spawn nslookup

if {$server != ""} {
    expect "> $"
    send "server $server\r"
}

#!! handle bad nameservers (Can't find address for server: Non-existent domain)
expect "> $"
send "set type=any\r"

expect "> $"
send "$domain\r"

set nameservers {}

while {1} {
    expect {
        -re "$domain.+nameserver = (\[^\r\n\]+)\r\n" {
            lappend nameservers $expect_out(1,string)
        }
        "> $" {
            break
        }
    }
}

# remove duplicates from the list of nameservers
for {set i 0} {$i < [llength $nameservers] - 1} {incr i} {
    for {set j [expr $i + 1]} {$j < [llength $nameservers]} {incr j} {
	if {[lindex $nameservers $i] == [lindex $nameservers $j]} {
	    # Remove element number j from the list.
	    set nameservers [lreplace $nameservers $j $j]
	}
    }
}

send_user "Found the following [llength $nameservers] nameservers:\n"
foreach nameserver $nameservers {
    send_user "\t$nameserver\n"
}

foreach nameserver $nameservers {
    send_user "\nTrying nameserver $nameserver...\n> "
    send "server $nameserver\r"
    send "ls $domain\r"

    log_user 1

    expect {
	-re "\\*\\*\\* Can't list domain $domain: .+\r\n" {
	    continue
	}
	"> $" {}
    }
    send_user "\n"
}

send "exit\r"

exit 0
