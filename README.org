#+TITLE:     Expect scripts
#+AUTHOR:    Fabrice Niessen
#+EMAIL:     (concat "fniessen" at-sign "pirilampo.org")
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en

#+PROPERTY:  header-args :shebang #!/usr/bin/expect -f

* Notes

- http://www.opensource.apple.com/source/gcc/gcc-1640/expect/example/
  (from Don Libes)

* Errors

** Invalid command name

- Prompts are best matched as regular expressions to match the *end* of it.

- The problem is this:

  #+begin_src tcl
  expect
  {
    timeout { send_user "\nDone\n"; }
  }
  #+end_src

  Newlines matter in Tcl scripts! When you use expect on its own, it just waits
  for the timeout (and processes any background expecting you've set up; none in
  this case). The next line, with what you're waiting for, is interpreted as
  a command all of its own with a very strange name (including newlines, spaces,
  etc.) which is not at all what you want.

  What you actually want to do is this:

  #+begin_src tcl
  expect {
    timeout { send_user "\nDone\n"; }
  }
  #+end_src

  By putting the brace on the same line as the expect, you'll get the behaviour
  that you (presumably) anticipate.

** Send bytes

To test:

#+begin_src shell
printf "hello\x00world" | hexdump -C
#+end_src

* Mail

** Verify an address

See =bin/vrfyaddress=.

** Send mail

See =bin/mail=.

** Open relay test

See http://mxtoolbox.com/domain/missioncriticalit.com/ for a transcript of the
session used to build the health report...

Normally, the exit status is 0 if the mail server is an open relay and 1
otherwise. But the exit status is 2 if an error occurred.

This follows the conventions for programs such as =grep=, =cmp=, and =diff=.

*************** TODO Handle verbose option (see Don Libes' code of gethostbyaddr

See =bin/openrelaytest=.

* Tips and tricks

** Regular expression

This leads to problems:

#+begin_src tcl
expect {
    -re {mail exchanger = (.*)\r\n} {...}
}
#+end_src

Why? Not clear to me. Maybe because the matched substring could still contain
=\r\n= (if there were multiple occurrences of those), hence not be usable when
that string is used afterward as command-line arguments.

Correct:

#+begin_src tcl
expect {
    -re "mail exchanger = (\[^\r]*)" {...}
}
#+end_src
